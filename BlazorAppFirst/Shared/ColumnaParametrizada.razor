@using System.Globalization;

<td class="tw-whitespace-nowrap tw-px-6 tw-py-4 tw-text-lg">
    @*@<span>@valorN</span>*@

    @if (@estado == "normal"||@estado == "eliminar")
        {
        @if (@tipoDatos[posicion].ToString() == "System.Decimal")
        {
            <span style="color:@colorText;">@fila.GetType().GetProperties()[posicion].GetValue(@fila, null) </span>
        }
        else if (@tipoDatos[posicion].ToString() == "System.Boolean")
        {
            <label class="toggle-button">
                <input type="checkbox" disabled checked="@Convert.ToBoolean(@fila.GetType().GetProperties()[posicion].GetValue(@fila, null))">
                <span class="slider tw-cursor-not-allowed"></span>
            </label>
        }
        else if (@tipoDatos[posicion].ToString() == "System.DateTime")
        {
            string formateo = (Convert.ToDateTime(@fila.GetType().GetProperties()[posicion].GetValue(@fila, null))).ToString("dd-MM-yyyy");

            <span>@formateo</span>
        } 
        else
        {
            <span style="color:@colorText;"> @fila.GetType().GetProperties()[posicion].GetValue(@fila, null) </span>
        }
    }else if (@estado == "editar")
    {
        <div class="input-field">
        @if (posicion != 0)
            {

             if (@tipoDatos[posicion].ToString() == "System.Int32")
            {
                    <input class="tw-border tw-border-primary-blueText tw-p-2 tw-rounded-lg tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent" style="color:@colorInput; width: 70px;" type="number" value="@fila.GetType().GetProperties()[posicion].GetValue(@fila, null)" onkeydown="return /[0-9]|Backspace|Delete/.test(event.key)" @oninput="HandleInputChange" />
            }
            else if (@tipoDatos[posicion].ToString() == "System.Decimal")
            {
                    <input class="tw-border tw-border-primary-blueText tw-p-2 tw-rounded-lg tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent" style="color:@colorInput; width: 70px;" type="number" value="@fila.GetType().GetProperties()[posicion].GetValue(@fila, null).ToString().Replace(',', '.')" step="any" onkeydown="return /[0-9\,]|Backspace|Delete/.test(event.key)" @oninput="HandleInputChange" />
            }

            else if (@tipoDatos[posicion].ToString() == "System.String")
            {
                    <input class="tw-border tw-border-primary-blueText tw-p-2 tw-rounded-lg tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent" style="color:@colorInput;" size="14" type="text" value="@fila.GetType().GetProperties()[posicion].GetValue(@fila, null)" @oninput="HandleInputChange" />
            }
            else if (@tipoDatos[posicion].ToString() == "System.Boolean")
            {
                <label class="toggle-button">
                        <input type="checkbox" checked=@Convert.ToBoolean(@fila.GetType().GetProperties()[posicion].GetValue(@fila, null)) @onchange="HandleInputChange">
                <span class="slider"></span>
                    </label>
            }
            else if (@tipoDatos[posicion].ToString() == "System.DateTime")
            {
                string formateo = (Convert.ToDateTime(@fila.GetType().GetProperties()[posicion].GetValue(@fila, null))).ToString("yyyy-MM-dd");
                    <div class="tw-relative">
                        <input  type="date" id="fecha" value="@formateo" @onchange="HandleInputChange" class="tw-border tw-border-primary-blueText tw-p-2 tw-rounded-lg tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent">
                        <span  class="tw-bg-primary-blueText tw-rounded-r-lg focus:tw-cursor-auto tw-absolute tw-inset-y-0 tw-right-0 tw-flex tw-items-center px-2 tw-pointer-events-none">
                            <i  class="fa-solid fa-calendar tw-text-white focus:tw-cursor-pointer"></i>
                        </span>
                    </div>
            }
            
        }
        else
        {
            <span style="color:@colorText;">@fila.GetType().GetProperties()[posicion].GetValue(@fila, null)</span>
        }
        </div>

    }else if (@estado == "add")
    {
        <div class="input-field">
            
            @if (posicion != 0)
            {
                
                if (@tipoDatos[posicion].ToString() == "System.Int32")
                {
                    <input class="tw-border tw-border-primary-blueText tw-p-2 tw-rounded-lg tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent" style="color:@colorInput; width: 70px;" type="number"  @oninput="HandleInputChangeAdd" />
                }
                else if (@tipoDatos[posicion].ToString() == "System.Decimal")
                {
                    <input class="tw-border tw-border-primary-blueText tw-p-2 tw-rounded-lg tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent" style="color:@colorInput; width: 70px;" type="number"  step="any" onkeydown="return /[0-9\,]|Backspace|Delete/.test(event.key)" @oninput="HandleInputChangeAdd" />
                }

                else if (@tipoDatos[posicion].ToString() == "System.String")
                {

                    <input class="tw-border tw-border-primary-blueText tw-p-2 tw-rounded-lg tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent" style="color:@colorInput;" size="14" type="text"  @oninput="HandleInputChangeAdd" />
                }
                else if (@tipoDatos[posicion].ToString() == "System.Boolean")
                {
                    <label class="toggle-button">

                        <input type="checkbox"  @onchange="HandleInputChangeAdd" >
                        <span class="slider"></span>

                    </label>
                }
                else if (@tipoDatos[posicion].ToString() == "System.DateTime")
                {
                    <div class="tw-relative " >
                        <input type="date" id="fecha"  class="tw-border tw-border-primary-blueText tw-p-2 tw-rounded-lg focus:tw-outline-none focus:tw-ring-2 focus:tw-ring-blue-500 focus:tw-border-transparent">
                        <span style="cursor:pointer !important"  class="tw-bg-primary-blueText tw-rounded-r-lg focus:tw-cursor-auto tw-absolute tw-inset-y-0 tw-right-0 tw-flex tw-items-center px-2 tw-pointer-events-none">
                            <i  class="fa-solid fa-calendar tw-text-white" ></i>
                        </span>
                    </div>
                }
                
            }
            else
            {
                <span style="color:@colorText;"></span>
            }
        </div>

    }
</td>


@code {
        [Parameter]
        [Required]
        public string estado { get; set; }

        [Parameter]
        [Required]
        public object fila { get; set; }

        [Parameter]
        [Required]
        public int posicion { get; set; }

        [Parameter]
        [Required]
        public List<string> tipoDatos { get; set; }

        [Parameter]
        public string color { get; set; } = "white";

        [Parameter]
        public string colorInput { get; set; } = "black";

        [Parameter]
        public string colorText { get; set; } = "black";
        [Parameter]
        public string tdStyle { get; set; } = "";

        [Parameter]
        public EventCallback<object> OnInputChange { get; set; }

        private async Task HandleInputChange(ChangeEventArgs e)
        {
            if (tipoDatos[posicion] == "System.Int32")
            {
                if (int.TryParse(e.Value.ToString(), out int valorEntero))
                {
                    fila.GetType().GetProperties()[posicion].SetValue(fila, valorEntero);
                    await OnInputChange.InvokeAsync(fila);
                }
            }
            else if (tipoDatos[posicion] == "System.Decimal")
            {
                if (decimal.TryParse(e.Value.ToString().Replace('.', ','), out decimal valorDecimal))
                {
                    fila.GetType().GetProperties()[posicion].SetValue(fila, valorDecimal);
                    await OnInputChange.InvokeAsync(fila);
                }
            }
            else if(tipoDatos[posicion] == "System.String")
            {
                fila.GetType().GetProperties()[posicion].SetValue(fila, e.Value);
                await OnInputChange.InvokeAsync(fila);
            }
            else if (tipoDatos[posicion] == "System.Boolean")
            {
                if (Boolean.TryParse(e.Value.ToString(), out Boolean valorBoolean)){

                    fila.GetType().GetProperties()[posicion].SetValue(fila, valorBoolean);
                    await OnInputChange.InvokeAsync(fila);
                }  
            }
            else if (tipoDatos[posicion] == "System.DateTime")
            {
                fila.GetType().GetProperties()[posicion].SetValue(fila, Convert.ToDateTime(e.Value));
                await OnInputChange.InvokeAsync(fila);
            }

        }

    private async Task HandleInputChangeAdd(ChangeEventArgs e)
    {   
            /*
            if (tipoDatos[posicion] == "System.Int32")
                {
                if (int.TryParse(e.Value.ToString(), out int valorEntero))
                {
                fila.GetType().GetProperties()[posicion].SetValue(fila, valorEntero);
        await OnInputChange.InvokeAsync(fila);
        }
        }
            else if (tipoDatos[posicion] == "System.Decimal")
            {
            if (decimal.TryParse(e.Value.ToString().Replace('.', ','), out decimal valorDecimal))
                {
                fila.GetType().GetProperties()[posicion].SetValue(fila, valorDecimal);
            await OnInputChange.InvokeAsync(fila);
        }
        }
        else if (tipoDatos[posicion] == "System.String")
            {
            fila.GetType().GetProperties()[posicion].SetValue(fila, e.Value);
            await OnInputChange.InvokeAsync(fila);
        }
        else if (tipoDatos[posicion] == "System.Boolean")
            {
            fila.GetType().GetProperties()[posicion].SetValue(fila, e.Value);
            await OnInputChange.InvokeAsync(fila);
        }
    */
    }


    //private string valorN;
    protected override void OnParametersSet()
    {
    }

    private void CambiarValorDePropiedad(object valor)
    {
        
        //valorN = fila.GetType().GetProperties()[posicion].GetValue(fila, null).ToString();
    }
}

@*
<style>
    .input-field {
        position: relative;
        margin: 5px 0;
    }

        .input-field input {
            font-size: 18px;
            padding: 10px 10px 10px 5px;
            display: block;
            width: 100%;
            border: none;
            border-bottom: 1px solid #757575;
        }

            .input-field input:focus {
                outline: none;
                border-bottom: 2px solid #00695c;
            }

            .input-field input[type="number"]::-webkit-inner-spin-button,
            .input-field input[type="number"]::-webkit-outer-spin-button {
                -webkit-appearance: none;
                margin: 0;
            }

        .input-field label {
            position: absolute;
            top: 0;
            left: 0;
            font-size: 18px;
            color: #999;
            pointer-events: none;
            transition: 0.2s ease all;
        }

        .input-field input[type="number"]:focus ~ label,
        .input-field input[type="number"]:not(:placeholder-shown) ~ label,
        .input-field input[type="text"]:focus ~ label,
        .input-field input[type="text"]:not(:placeholder-shown) ~ label {
            top: -35px;
            left: 0;
            color: #00695c;
            font-size: 14px;
        }

        .input-field input[type="number"],
        .input-field input[type="text"] {
            font-size: 16px;
            height: 40px;
        }

        .input-field .material-icons {
            color: #757575;
            font-size: 18px;
            position: absolute;
            top: 15px;
            right: 0;
            display: none;
        }

        .input-field input[type="text"]:focus + .material-icons,
        .input-field input[type="text"]:not(:placeholder-shown) + .material-icons {
            display: block;
        }

        .input-field input[type="number"]:focus + .material-icons,
        .input-field input[type="number"]:not(:placeholder-shown) + .material-icons {
            display: block;
        }
</style>
*@

<style>
    .toggle-button {
        display: inline-block;
        position: relative;
        width: 60px;
        height: 30px;
    }

    .toggle-button input[type="checkbox"] {
        display: none;
    }

    .toggle-button .slider {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        border-radius: 34px;
        transition: 0.4s;
    }

    .toggle-button .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 2px;
        bottom: 2px;
        background-color: white;
        border-radius: 50%;
        transition: 0.4s;
    }




        .toggle-button input[type="checkbox"] + .slider {
            background-color: red;
        }
        .toggle-button input[type="checkbox"]:checked + .slider {
            background-color: green;
        }

        .toggle-button input[type="checkbox"]:checked + .slider:before {
            transform: translateX(26px);
        }

        .toggle-button input[type="checkbox"]:checked + .slider::before {
                content: "✔";
                color: green;
        }

        .toggle-button input[type="checkbox"] + .slider::before {
            content: "✖";
            color:red;
        }


</style>