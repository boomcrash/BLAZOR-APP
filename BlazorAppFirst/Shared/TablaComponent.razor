<div class="tw-border-solid tw-border-2 tw-border-gray-400 tw-rounded-t-lg tw-relative tw-w-auto tw-h-auto tw-mx-auto tw-my-8 tw-bg-white tw-shadow-lg tw-rounded-lg tw-overflow-hidden tw-transform hover:tw-translate-y-2 tw-transition tw-duration-300 tw-ease-in-out tw-flex tw-flex-col tw-justify-center">
  <div class="tw-flex-1 tw-overflow-auto">
      @*
        <div class="tw-flex tw-justify-center tw-items-center ">
            <div class="tw-relative tw-text-center tw-p-10 tw-bg-gradient-to-br tw-from-gray-50 tw-to-gray-300 tw-rounded-lg tw-shadow-2xl tw-transform tw-rotate-0 tw-transform">
                <h1 class="tw-inline-block tw-flex tw-justify-center tw-items-center tw-text-primary-black tw-font-extrabold tw-text-2xl tw-text-opacity-90 tw-tracking-widest tw-transform tw--rotate-0 tw-transition-transform tw-duration-500 hover:tw-transform hover:tw-translate-y-4 tw-transition tw-duration-300 tw-ease-in-out">@Title</h1>
            </div>
        </div>
        *@
        
        <h1 class="tw-border-b-2 tw-py-8 tw-inline-block tw-flex tw-justify-center tw-items-center tw-text-primary-black tw-font-extrabold tw-text-2xl tw-text-opacity-90 tw-tracking-widest tw-transform tw--rotate-0 tw-transition-transform tw-duration-500 hover:tw-transform hover:tw-translate-y-4 tw-transition tw-duration-300 tw-ease-in-out">@Title</h1>

        <div class="tw-md-form tw-mt-0 ">
            <button class="tw-mb-5 tw-w-auto tw-float-right tw-text-left tw-text-2xl hover:tw-text-primary-blueText tw-mr-10 tw-mt-6" @onclick="() => activarSearch()">
                <i class="@iconFilter"></i>
            </button>
        @if (@buscar)
        {
                <input class="tw-mt-6 tw-float-right tw-text-left tw-border tw-border-primary-blueText tw-p-2 tw-rounded-lg tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent tw-mr-5" @bind-value="@searchTerm" @oninput="HandleSearch" type="text" placeholder="Buscar" aria-label="Buscar" />
        }

    </div>


    @*tw-text-3xl*@
    <table class="tw-border-collapse tw-w-full tw-table-auto tw-text-center tw-text-sm tw-font-light">

        <thead class="tw-border-b tw-bg-neutral-800 tw-font-medium tw-text-white tw-dark:border-neutral-500 tw-bg-primary-white">
            @if (@ver)
            {
                foreach (var item in editedObject.GetType().GetProperties())
                {
                    <span class="tw-px-4 tw-py-2">@item.GetValue(@editedObject, null).ToString()</span>
                }
            }
            <tr class="tw-bg-primary-white">
                @for (int i = -1; i < @headers.Count; i++)
                {
                    @if (i == -1)
                    {
                <th class="tw-px-4 tw-py-2 tw-text-primary-blueText">ACCIONES</th>
                    }
                    else
                    {
                        <th class="tw-px-4 tw-py-2 tw-text-primary-blueText">@headers[i].ToUpper()</th>
                    }
                }
            </tr>
        </thead>
        <tbody >

            @{var dataset=busqueda?@filteredData:@datos;}
            @foreach (var row in @dataset)
            {
                if (row == null )
                {
                    continue; // saltar al siguiente elemento en el bucle si row es nulo
                }
                else
                {

                    int index = @datos.IndexOf(row);
                    if (@editedObject != null && index==@FilaPosicion)
                    {
                        fila = editedObject;
                    }
                    else
                    {
                        fila = row;
                        FilaPosicion = index;
                    }
                    var fondoFila = @index == @filaEditando ? @colorEdit.ToString() : "";
                    fondoFila = @index == filaEliminando ? colorDelete.ToString() : fondoFila;
                    <tr class="tw-bg-primary-white">
                        <td class="">
                        
                            @if (@index == @filaEditando)
                            {
                                <button @onclick="() => SaveEdit(index)" class="tw-text-2xl tw-mr-4 tw-text-primary-green"><i class="fa-solid fa-check"></i></button>
                                <button @onclick="() => CancelEdit()" class="tw-text-2xl tw-text-red-500"><i class="fa-solid fa-x"></i></button>
                            }
                            else if (@index == @filaEliminando)
                            {
                                    <button @onclick="() => SaveDelete(index)" class="tw-text-2xl tw-mr-4 tw-text-primary-green "><i class="fa-solid fa-check"></i></button>
                                <button @onclick="() => CancelDelete()" class="tw-text-2xl tw-text-red-500"><i class="fa-solid fa-x"></i></button>
                            }
                            else{

                                    <button @onclick="() => EditRow(fila,index)" class="tw-text-2xl tw-mr-4  tw-text-primary-blueText hover:tw-scale-1.7"><i class="fa-solid fa-pencil"></i></button>
                                    <button @onclick="() => DeleteRow(fila,index)" class="tw-text-2xl tw-text-red-500"><i class="fa-sharp fa-solid fa-trash "></i></button>


                            }

                        </td>
                   

                            @for (int i = 0; i < row.GetType().GetProperties().Length; i++)
                            {
                        
                                @*
                                var prop = row.GetType().GetProperties();
                                @prop.GetValue(i)
                                if (@row.GetType().GetProperties()[i].GetValue(@row, null) != null)
                                {
                                <ColumnaParametrizada estado="@estado" row="@row" posicion="@i" tipoDatos="@nombresDeTipos" />
                                }*@
                            //string valor = @row.GetType().GetProperties()[i].GetValue(@row, null).ToString();
                            //<span>@nombresDeTipos[i]</span>

                                if (@index == @filaEditando)
                                    {
                                <ColumnaParametrizada tdStyle="@tdStyle" colorText="@colorText" colorInput="@colorInput" estado="editar" fila="@fila" posicion="i" tipoDatos="@nombresDeTipos" OnInputChange="HandlefilaChanged" />
                                    }
                                    else if (@index == filaEliminando)
                                    {
                                <ColumnaParametrizada tdStyle="@tdStyle" colorText="@colorText" colorInput="@colorInput" estado="normal" fila="@fila" posicion="i" tipoDatos="@nombresDeTipos" OnInputChange="HandlefilaChanged" />
                                    }
                                    else
                                    {
                                <ColumnaParametrizada tdStyle="@tdStyle" colorText="@colorText" colorInput="@colorInput" estado="normal" fila="@fila" posicion="i" tipoDatos="@nombresDeTipos" OnInputChange="HandlefilaChanged" />
                                    }
                            }
                    
                    
                    
                    
                    </tr>
                }
            
            }

       
        
        </tbody>
    </table>
    </div>
</div>

@if (filteredData?.Count == 0 && busqueda)
{
    <div class="tw-flex items-center tw-justify-center tw-h-screen">
        <div class="tw-bg-white tw-rounded-lg tw-shadow-lg tw-p-6">
            <div class="tw-flex tw-items-center tw-justify-center tw-text-red-500 tw-text-4xl tw-mb-4">
                <i class="fa-solid fa-triangle-exclamation"></i>
            </div>
            <h1 class="tw-text-3xl tw-font-bold tw-mb-2">No se encontraron resultados</h1>
            <p class="tw-text-gray-600">La búsqueda que realizaste no arrojó ningún resultado.</p>
        </div>

    </div>
}



@code {

    [Parameter]
    [Required]
    public List<string> headers { get; set; }

    [Parameter]
    [Required]
    public string Title { get; set; }

    [Parameter]
    [Required]
    public List<object> datos { get; set; }

    [Parameter]
    [Required]
    public string[] columnValidation { get; set; }

    public int FilaPosicion = -1;
    public object fila { get; set; }
    public object editedObject { get; set; } = null;

    public int filaEditando=-1;
    public int filaEliminando=-1;

    public List<string?> nombresDeTipos = new List<string>();

    [Parameter]
    public string colorDelete  { get; set; } = "#FFBFB1";
    [Parameter]
    public string colorEdit   { get; set; } = "#A5FF8B";
    [Parameter]
    public string colorInput { get; set; } = "black";
    [Parameter]
    public string colorText { get; set; } = "black";
    [Parameter]
    public string headerStyle { get; set; } = "";
    [Parameter]
    public string tableStyle { get; set; } = "";
    [Parameter]
    public string tdStyle { get; set; } = "";

    private List<object> filteredData;
    public string searchTerm { get; set; }
    public bool busqueda=false;

    public bool ver=false;
    public bool buscar = false;

    public string iconFilter = "fa-solid fa-filter-circle-xmark";
    protected override void OnInitialized()
    {

    }

    protected override void OnParametersSet()
    {
        Type[] tiposDeDatos=null; 
        for (int i = 0; i < datos.Count; i++)
        {
            var filaDatos = datos[i];
            tiposDeDatos = new Type[filaDatos.GetType().GetProperties().Length];
            for (int j = 0; j < tiposDeDatos.Length; j++)
            {
                var propiedad = filaDatos.GetType().GetProperties()[j];
                var tipo = propiedad.PropertyType;
                var tipoSubyacente = Nullable.GetUnderlyingType(tipo);
                if (tipoSubyacente != null && (tipoSubyacente.IsPrimitive || tipoSubyacente == typeof(decimal)))
                {
                    tiposDeDatos[j] = tipoSubyacente;
                }
                else 
                {
                    tiposDeDatos[j] = tipo;
                }
            }
        }
        nombresDeTipos = tiposDeDatos.Select(t => t.FullName).ToList();
    }

    private void activarSearch()
    {
        
        this.iconFilter = buscar ? "fa-solid fa-filter" : "fa-solid fa-filter-circle-xmark";
        this.buscar = buscar ? false : true;
    }

    private void SaveEdit(int index)
    {

        //headers.Clear();
        //datos.Clear();

        // valoresActuales.Clear();
        if (editedObject != null)
        {
            datos[index] = editedObject;
            filaEditando = -1;
            editedObject = null;
        }
        else
        {
            filaEditando = -1;
        }

    }


    private void EditRow(object row, int index)
    {
        // aquí puedes obtener los datos de la fila y hacer algo con ellos, como mostrar un formulario de edición
        Console.WriteLine("Editando fila: " + row.ToString());

        filaEditando = index;


    }

    private void CancelEdit()
    {
        filaEditando = -1;
    }

    private void DeleteRow(object row, int index)
    {
        // aquí puedes obtener los datos de la fila y hacer algo con ellos, como confirmar la eliminación
        Console.WriteLine("Eliminando fila: " + row.ToString());
        filaEliminando = index;
    }




    private void SaveDelete(int index)
    {
        // headers.Clear();
        // datos.Clear();
        datos.RemoveAt(index);
        filaEliminando = -1;
        // resto del código para eliminar la fila
    }

    private void CancelDelete()
    {
        filaEliminando = -1;
    }


    //evento para detectar cambios en el input
    private void HandlefilaChanged(object nuevaFila)
    {
        editedObject = nuevaFila;
        var props = editedObject.GetType().GetProperties();
        for (int i = 0; i < props.Length; i++)
        {
            Console.WriteLine(props[i].GetValue(editedObject).ToString());

            //valoresActuales.Add(props[i].GetValue(editedObject).ToString());
        }
        // aqui puedes hacer algo con el valor
    }



    //busqueda:
    private void HandleSearch(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value.ToString()))
        {
            filteredData = datos.Where(x => x.GetType().GetProperties()
                .Any(p => p.GetValue(x)?.ToString().ToLower().Contains(e.Value.ToString().ToLower()) == true)).ToList();
            busqueda = true;
            Console.WriteLine(filteredData);
        }
        else
        {
            Console.WriteLine("todos los valores coinciden");
            busqueda = false;
        }
    }


}

@*
<style>
    /* Estilos para la tabla */
    .my-table-class {
        border-collapse: collapse;
        width: 100%;
        font-size: 14px;
        font-weight: 500;
        color: rgba(0, 0, 0, 0.87);
        text-align: left;
        overflow: hidden;
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.12), 0 1px 5px rgba(0, 0, 0, 0.24);
        transition: all 0.3s cubic-bezier(.25, .8, .25, 1);
    }

    /* Estilos para las celdas de encabezado */
    .my-table-class th {
        background-color: #2196f3;
        color: white;
        font-weight: 600;
        padding: 12px 15px;
        text-transform: uppercase;
    }

    /* Estilos para las celdas de datos */
    .my-table-class td {
        padding: 10px 15px;
        vertical-align: middle;
        
    }

    /* Estilos para las filas alternas */
    .my-table-class tbody tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    /* Estilos para los botones de acción */
    .my-button {
        display: inline-block;
        border-radius: 4px;
        background-color: #2196f3;
        color: #fff;
        padding: 6px 12px;
        text-align: center;
        font-size: 14px;
        margin: 2px;
        cursor: pointer;
        border: none;
        box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);
        transition: background-color 0.3s;
    }


    .my-table-class:hover {
        box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 40px 0 rgba(0, 0, 0, 0.19);
        transform: translateY(-10px);
    }

    .my-button:hover {
        transform: scale(1.2);
        transition: all 0.2s ease-in-out;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }


</style>*@